Admin Side needed new tables :D

CREATE TABLE intakes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE semesters (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    intake_id INT NOT NULL,
    FOREIGN KEY (intake_id) REFERENCES intakes(id)
);

CREATE TABLE modules (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    intake_id INT NOT NULL,
    semester_id INT NOT NULL,
    FOREIGN KEY (intake_id) REFERENCES intakes(id),
    FOREIGN KEY (semester_id) REFERENCES semesters(id)
);

CREATE TABLE IF NOT EXISTS students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id VARCHAR(20) UNIQUE NOT NULL,
    full_name VARCHAR(100) NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    intake_id INT,
    status ENUM('active', 'dropped_out', 'graduated') DEFAULT 'active',
    FOREIGN KEY (intake_id) REFERENCES intakes(id)
);

--

here are some changes and note for students, projects, submissions and feedback :p

on the registration page, the option to choose a role as a student can be removed since students will be added by the admin.
data will be stored in both the `students` and `users` tables:
    each student will have their own unique id in the `students` table
    the `students` table will reference the user_id from the `users` table

the `users` table will be used for login purposes while the `students` table will be used for managing and displaying student information
for the admin and supervisor.

NEW students table:
CREATE TABLE IF NOT EXISTS students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNIQUE NOT NULL,
    student_id VARCHAR(20) UNIQUE NOT NULL,
    full_name VARCHAR(100) NOT NULL,
    intake_id INT,
    status ENUM('active', 'dropped_out', 'graduated') DEFAULT 'active',
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (intake_id) REFERENCES intakes(id)
);

projects table:
CREATE TABLE projects (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT NOT NULL,
    project_name VARCHAR(255) NOT NULL,
    description TEXT,
    start_date DATE,
    end_date DATE,
    supervisor_id INT NOT NULL,
    status ENUM('In progress', 'Completed', 'Pending') DEFAULT 'In progress',
    FOREIGN KEY (student_id) REFERENCES students(id),
    FOREIGN KEY (supervisor_id) REFERENCES users(id)
);

submissions table:
CREATE TABLE submissions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    project_id INT NOT NULL,
    submission_date DATE NOT NULL,
    document_type VARCHAR(255) NOT NULL,
    document_name VARCHAR(255) NOT NULL,
    document_path VARCHAR(255) NOT NULL,
    FOREIGN KEY (project_id) REFERENCES projects(id)
);

feedback table:
CREATE TABLE feedback (
    id INT AUTO_INCREMENT PRIMARY KEY,
    submission_id INT NOT NULL,
    feedback_to_student TEXT,
    feedback_to_admin TEXT,
    marks INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (submission_id) REFERENCES submissions(id)
);

to handle the students who are individual or in group, a table will be created to manage many to many relationship between
students and projects:
    CREATE TABLE student_project (
        student_id INT,
        project_id INT,
        PRIMARY KEY (student_id, project_id),
        FOREIGN KEY (student_id) REFERENCES students(student_id),
        FOREIGN KEY (project_id) REFERENCES projects(project_id)
    );

by inserting a row for each combination of student_id and project_id which can represent the involvement of a student in multiple projects
the composite primary key (student_id and project_id) ensures that each combination is unique to prevent duplication

CREATE TABLE supervisors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    intake_id INT NOT NULL,
    supervisor_id VARCHAR(255) NOT NULL UNIQUE,
    full_name VARCHAR(255) NOT NULL,
    FOREIGN KEY (intake_id) REFERENCES intakes(id)
);

// darwish create assignment updates

i've changed the projects table
this is the updated one

CREATE TABLE projects (
    id INT AUTO_INCREMENT PRIMARY KEY,
    project_name VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'In progress',
    is_group_project BOOLEAN NOT NULL,
    intake_id INT,
    semester_id INT,
    module_id INT,
    FOREIGN KEY (intake_id) REFERENCES intakes(id),
    FOREIGN KEY (semester_id) REFERENCES semesters(id),
    FOREIGN KEY (module_id) REFERENCES modules(id)
);


-- Add intake_id column to the projects table
ALTER TABLE projects
ADD COLUMN intake_id INT;

-- Add semester_id column to the projects table
ALTER TABLE projects
ADD COLUMN semester_id INT;

-- Add foreign key constraints
ALTER TABLE projects
ADD CONSTRAINT fk_projects_intake
FOREIGN KEY (intake_id) REFERENCES intakes(id);

ALTER TABLE projects
ADD CONSTRAINT fk_projects_semester
FOREIGN KEY (semester_id) REFERENCES semesters(id);

ALTER TABLE projects
ADD COLUMN module_id INT;

ALTER TABLE projects
ADD CONSTRAINT fk_projects_module
FOREIGN KEY (module_id) REFERENCES modules(id);

CREATE TABLE groups (
    id INT AUTO_INCREMENT PRIMARY KEY,
    group_name VARCHAR(100) NOT NULL,
    project_id INT,
    FOREIGN KEY (project_id) REFERENCES projects(id)
);

CREATE TABLE group_members (
    id INT AUTO_INCREMENT PRIMARY KEY,
    group_id INT,
    student_id INT,
    FOREIGN KEY (group_id) REFERENCES groups(id),
    FOREIGN KEY (student_id) REFERENCES students(id)
);

new updates! references user id from users table

ALTER TABLE students ADD COLUMN user_id INT AFTER id;
ALTER TABLE supervisors ADD COLUMN user_id INT AFTER id;

-- Add foreign key constraints (optional, but recommended for referential integrity)
ALTER TABLE students ADD CONSTRAINT fk_students_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE supervisors ADD CONSTRAINT fk_supervisors_user_id FOREIGN KEY (user_id) REFERENCES users(id);